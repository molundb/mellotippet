// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:mellotippet/config/config.dart';
import 'package:mellotippet/service_location/get_it.dart';
import 'package:mellotippet/firebase_environment.dart';

final config = getIt.get<Config>();
final firebaseEnv = getIt.get<FirebaseEnvironment>();

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get android => FirebaseOptions(
        apiKey: firebaseEnv.firebaseAPIKeyAndroid(config.flavor),
        appId: firebaseEnv.firebaseAppIdAndroid(config.flavor),
        messagingSenderId: firebaseEnv.firebaseMessagingSenderId(config.flavor),
        projectId: firebaseEnv.firebaseProjectId(config.flavor),
        storageBucket: firebaseEnv.firebaseAPIKeyAndroid(config.flavor),
      );

  static FirebaseOptions get ios => FirebaseOptions(
        apiKey: firebaseEnv.firebaseAPIKeyIos(config.flavor),
        appId: firebaseEnv.firebaseAppIdIos(config.flavor),
        messagingSenderId: firebaseEnv.firebaseMessagingSenderId(config.flavor),
        projectId: firebaseEnv.firebaseProjectId(config.flavor),
        storageBucket: firebaseEnv.firebaseStorageBucket(config.flavor),
        iosClientId: firebaseEnv.firebaseIosClientId(config.flavor),
        iosBundleId: firebaseEnv.firebaseIosBundleId(config.flavor),
      );
}
